import math
import os
import platform
import oracledb
import datetime
import re
from config_data.config import load_oracle_password, load_oracle_dsn, load_oracle_user
import logging

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–Ω–µ–∫—Ç–∞ —Å –ë–î Oracle (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Thick Client)

# oracledb.init_oracle_client(lib_dir=r"D:\instantclient_11_2")
d = None  # default suitable for Linux
if platform.system() == "Darwin" and platform.machine() == "x86_64":  # macOS
    d = os.environ.get("HOME") + ("/Downloads/instantclient_19_8")
elif platform.system() == "Windows":
    d = r"D:\instantclient_11_2"
oracledb.init_oracle_client(lib_dir=d)



def pool():
    return oracledb.create_pool(
        user=load_oracle_user(),
        password=load_oracle_password(),
        dsn=load_oracle_dsn(),
        port=1521,
        min=1, max=1, increment=0)


pool = pool()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–∞ —Å –±–∞–∑–æ–π
def maintain_connection():
    with pool.acquire() as connection:
        cursor = connection.cursor()
        select = cursor.execute("SELECT to_char(SYSDATE, 'HH24:MI:SS | dd.mm.yyyy') FROM DUAL")
        return logger.info(f'ORACLE ANSWER RECEIVED: {[i for i in select][0][0]}')


# –§—É–Ω–∫—Ü–∏—è "–¥–∞—Ç—ã –∑–∞–≤—Ç—Ä–∞—à–µ–Ω–µ–≥–æ –¥–Ω—è"
def date2():
    return (datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%d.%m.%Y")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–≤–µ–¥–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
def match_dates(date):
    match = re.fullmatch(r'\d\d\W\d\d\W\d\d\d\d', date)
    if match:
        return date


# —Ñ—É–Ω–∫—Ü–∏—è –ª–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î Oracle —Å —Ä–∞–±–æ—á–∏–º–∏ —Å–º–µ–Ω–∞–º–∏ –ø–æ –¥–∞—Ç–µ –∏ —Ç–∞–±–µ–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
def get_shifts(date, tabel):
    with pool.acquire() as connection:
        cursor = connection.cursor()
        cursor.execute(
            "SELECT AGENT, to_char(DT, 'dd.mm.yyyy'), GNAME, BEGIN1, DUR1, BREAK1, BEGIN2, DUR2, BREAK2, "
            "SIGN, SICK FROM "
            " t_graph_workday3 WHERE "
            "to_char(DT,'dd.mm.yyyy') ='{date_month}' AND AGENT = '{tabel}'"
            " AND STATUS = 1 ".format(date_month=date, tabel=tabel))
        return [i for i in cursor]


# –§—É–Ω–∫—Ü–∏—è
def get_all_tabels():
    connection = pool.acquire()
    cursor = connection.cursor()
    cursor.execute("SELECT DISTINCT AGENT FROM t_graph_workday3")
    return [i[0] for i in cursor]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è, –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∏ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ë–î Oracle
def read_shifts(results):
    try:
        shift = results[0][2]
        time_start1 = results[0][3]
        if time_start1 == 0:
            time_start1 = 0.00000001
        time_start2 = results[0][6]
        if time_start2 == 0:
            time_start2 = 0.00000001
        time_shift_dur1 = results[0][4]
        time_shift_dur2 = results[0][7]
        time_break1 = results[0][5]
        time_break2 = results[0][8]
        sign = results[0][9]
        sick = results[0][10]

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å–º–µ–Ω—ã –≤–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã—Ö
        def shift_type():
            if not sick:
                if sign:
                    if sign == '–û':
                        smena = f'–≤—ã—Ö–æ–¥–Ω–æ–π - –í—ã –≤ –æ—Ç–ø—É—Å–∫–µ ‚ú® \n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞ üèñ'
                        return smena
                    elif sign == '–ê':
                        smena = f'–Ω–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å - –æ—Ç–ø—É—Å–∫ –∑–∞ —Å–≤–æ–π —Å—á—ë—Ç ‚ú®'
                        return smena
                    else:
                        smena = '–ù–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å ‚ú®'
                        return smena
                else:
                    if shift == '–£':
                        if time_start1 and not time_start2:
                            smena = '—É—Ç—Ä–µ–Ω–Ω—è—è —Å–º–µ–Ω–∞ ‚òÄ'
                            return f'{smena}\nc {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())}'
                        elif time_start1 and time_start2:
                            smena = '—Å–º–µ–Ω–∞ —É—Ç—Ä–æ-–Ω–æ—á—å ‚òÄüåô'
                            return f'{smena}\n—Å {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())}\n–∏' \
                                   f' —Å {time_converter(time_start2)} –¥–æ {time_converter(shift_time_end2())}'
                    elif shift == '–ù':
                        if time_start1 and time_start2:
                            smena = '—Å–º–µ–Ω–∞ –Ω–æ—á—å-–Ω–æ—á—å üåôüåô'
                            return f'{smena}\nc {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())}\n–∏ ' \
                                   f'—Å {time_converter(time_start2)} –¥–æ {time_converter(shift_time_end2())}'
                        elif not time_start1 and time_start2:
                            smena = '–Ω–æ—á–Ω–∞—è —Å–º–µ–Ω–∞ üåô'
                            return f'{smena}\n—Å {time_converter(time_start2)} –¥–æ {time_converter(shift_time_end2())}'
                        else:
                            smena = '–æ—Ç—Å—ã–ø–Ω–æ–π üò¥'
                            return f'{smena}\n–ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å {time_converter(time_start1)} ' \
                                   f'–¥–æ {time_converter(shift_time_end1())}'
                    elif shift == '–†':
                        smena = '—Ä–∞–∑—Ä—ã–≤–Ω–∞—è —Å–º–µ–Ω–∞ ‚ö°Ô∏è'
                        return f'{smena}\nc {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())} \n–∏ —Å ' \
                               f'{time_converter(time_start2)} –¥–æ {time_converter(shift_time_end2())}'
                    elif shift == '–í':
                        smena = '–≤–µ—á–µ—Ä–Ω—è—è —Å–º–µ–Ω–∞ üåá'
                        return f'{smena}\nc {time_converter(time_start1)} –¥–æ {time_converter(shift_time_end1())}'
                    else:
                        smena = f'–≤—ã—Ö–æ–¥–Ω–æ–π ‚ú®\n–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞ üòâ'
                        return smena
            else:
                smena = f'–Ω–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å - –í—ã –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º ü§í \n–ü–æ–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ üôè'
                return smena

    except IndexError:
        return f'–Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –¥–∞—Ç–∞ ‚õî'

    # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π –∏ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã
    def shift_time_end1():
        if time_break1:
            shift_end1 = time_start1 + time_shift_dur1 + time_break1 / 60
        else:
            shift_end1 = time_start1 + time_shift_dur1
        return shift_end1

    # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –¥–ª—è —Ä–∞–∑—Ä—ã–≤–Ω–æ–π —Å–º–µ–Ω—ã
    def shift_time_end2():
        if time_break2:
            shift_end2 = time_start2 + time_shift_dur2 + time_break2 / 60
        else:
            shift_end2 = time_start2 + time_shift_dur2
        return shift_end2

    # –§—É–Ω–∫—Ü–∏—è-–∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –¥—Ä–æ–±–µ–π –≤ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã
    def time_converter(time):
        if time != 0:
            leftover_hours = int(time // 1)
            if leftover_hours == 0:
                leftover_hours = '0'
            elif leftover_hours == 24:
                leftover_hours = '0'
            leftover_minutes = math.ceil(float(time % 1 * 60))
            leftover = f'{leftover_hours}:{leftover_minutes:02d}'
            return leftover
    return shift_type()




